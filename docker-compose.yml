#    command: bash -c 'python start.py 9004'
#certbt cree les keys il fo que nginx les recupere donc partager un -v entre nginx et certbot
# tty open 
#        command: bash -c 'python start.py'
#sioserver    command: bash -c "npm install && npm start"
#django cmd=>    command: bash -c "gunicorn django.wsgi --bind=0.0.0.0:8001 --reload"
#    command: bash -c 'npm start'
#    ports: <= plus besoin d exposer le port de node
#      - "80:3000"
#
version: "3"
services:
  express:
    build:
      dockerfile: Dockerfile
      context: ./node_project
    container_name: express
    hostname: express
    working_dir: /node_project/app
    command: bash -c 'npm install && npm start'
    volumes:
      - ./node_project:/node_project
    networks:
      - frontend
      - backend
  db:
    image: postgres
    container_name: db
    restart: always
    hostname: db
    environment:
      - POSTGRES_PASSWORD=mysecretpassword
    volumes:
      - ./config/postgres:/docker-entrypoint-initdb.d
      - ./config/postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend
  nginx:
    image: purpleren/purpleren_project:nginx
    container_name: nginx
    hostname: nginx
    read_only: true
    user: root
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/nginx_tmp:/nginx_tmp:rw
      - ./node_project/app:/node_project/app:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - express
    networks:
      - frontend
networks:
  frontend:
  backend:
